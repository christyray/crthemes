% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/theme_cr.R
\name{apply_scaling}
\alias{apply_scaling}
\title{Size scaling for plots with customized theme}
\usage{
apply_scaling(base_scale = 1, font_scale = 1, set_margin = TRUE)
}
\arguments{
\item{base_scale}{Scaling factor for the plot as a whole. A value of 1
corresponds to a font size of 12 pt and a figure size of 6" by 4"}

\item{font_scale}{Scaling factor for the font as compared to the plot. A
value of 1 will scale the font to the plot size. Larger numbers make the
font large compared to the plot size; smaller numbers make the font small
compared to the plot size.}

\item{set_margin}{Flag for whether or not to change the plot margin from the
baseline. Used as a separate option because it is difficult to specifically
adjust when plots are combined.}
}
\value{
A list containing the theme properties.
}
\description{
This function applies only the size-based theme modifications from the
\code{\link{theme_cr}()} function. It does not include \code{\%+replace\%},
so it can be applied on top of pre-existing theme modifications (e.g.,
the \code{\link{theme_cut}()} functions).
}
\examples{
library(ggplot2)

df <- data.frame(x = 1:5, y = 1:5, z = c("a", "b", "c", "b", "c"))
p <- ggplot(df, aes(x, y, color = z)) + geom_point()

\dontrun{
p + theme_cr() # Uses default scaling and font

# Multiply height and width of the plot by 2
p + theme_cr() + apply_scaling(base_scale = 2)

# Divide height and width of plot by 2 but keep original font size
p + theme_cr() + apply_scaling(base_scale = 0.5, font_scale = 2)

# Multiply height and wdith of the plot by 2 but do not change the margins
p + theme_cr() + apply_scaling(base_scale = 2, set_margin = FALSE)
}
}
